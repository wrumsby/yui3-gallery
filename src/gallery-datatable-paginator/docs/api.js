YUI.add("yuidoc-meta", function(Y) {
   Y.YUIDoc = { meta: {
    "classes": [
        "Y.DataTable.Paginator"
    ],
    "modules": [
        "datatable"
    ],
    "allModules": [
        {
            "displayName": "datatable",
            "name": "datatable",
            "description": "Defines a Y.DataTable class extension to add capability to support a Paginator View-Model and allow\n paging of actively displayed data within the DT instance.\n\nWorks with either client-side pagination (i.e. local data, usually in form of JS Array) or\n in conjunction with remote server-side pagination, via either DataSource or ModelSync.REST.\n\nAllows for dealing with sorted data, wherein the local data is sorted in place, and in the case of remote data the \"sortBy\"\nattribute is passed to the remote server.\n\n <h4>Usage</h4>\n\n      var dtable = new Y.DataTable({\n          columns:    [ 'firstName','lastName','state','age', 'grade' ],\n          data:       enrollment.records,\n          scrollable: 'y',\n          height:     '450px',\n          sortBy:     [{lastName:'asc'}, {grade:-1}],\n          paginator:  new PaginatorView({\n\t\t\t\t\tmodel: \t\tnew PaginatorModel({itemsPerPage:50, page:3}),\n\t\t\t\t\tcontainer:\t'#pagContA'\n          }),\n          resizePaginator: true\n      });\n\n <h4>Client OR Server Pagination</h4>\n\n A determination of whether the source of `data` is either \"local\" data (i.e. a Javascript Array or Y.ModelList), or is\n provided from a server (either DataSource or ModelSync.REST) is made in the method [_dataChange](#method__dataChange).\n We use a \"duck-type\" evaluation, which may not be completely robust, but has worked so far in testing. The process used to\n evaluate the \"source\" of data can be reviewed in the _dataChange method.\n\n For server-side pagination, the OUTGOING request must include (as a minimum);  `page`, `totalItems` and `sortBy` querystring\n parameters.  Likewise, the INCOMING (returned response) must include as \"meta-data\" at least `totalItems`, plus any other\n PaginatorModel attributes.   The key item within the returned response is `totalItems'.\n\n We have provided an attribute [serverPaginationMap](#attr_serverPaginationMap) as an object hash to translate both outgoing\n querystring parameter names and incoming (response returned) parameter names in order to match what is expected by the\n PaginatorModel.  Please see this attribute or the examples for how to utilize this map for your use case.\n\n <h4>Loading the \"data\" For a Page</h4>\n Once the \"source of data\" is known, the method [processPageRequest](#method_processPageRequest) fires on a `pageChange`.\n\n For the case of \"local data\", i.e. where `_pagDataSrc:'local'`, the existing buffer of data is sliced according to the pagination\n state, and the data is loaded silently, and `this.syncUI()` is fired to refresh the DT.\n\n The case of \"remote data\" (from a server) is actually more straightforward.  For the case of ModelSync.REST remote data the\n current \"pagination state\" is processed through the [serverPaginationMap](#attr_serverPaginationMap) hash (to convert to\n queryString format) and the ModelList.load() method is called.  For the case of a DataSource, a similar approach is used where\n the [requestStringTemplate](#attr_requestStringTemplate) is read, processed through the serverPaginationMap hash and a\n datasource.load() request is fired.\n\n This extension DOES NOT \"cache\" pages for remote data, it simply inserts the full returned data into the DT.  So as a consequence,\n a pagination state change for remote data involves a simple request sent to the server source (either DataSource or ModelSync.REST)\n and the response results are loaded in the DT as in any other \"response\"."
        }
    ]
} };
});